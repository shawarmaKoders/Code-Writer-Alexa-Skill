{
    "interactionModel": {
        "languageModel": {
            "invocationName": "code writer",
            "intents": [
                {
                    "name": "AMAZON.CancelIntent",
                    "samples": []
                },
                {
                    "name": "AMAZON.HelpIntent",
                    "samples": []
                },
                {
                    "name": "AMAZON.StopIntent",
                    "samples": []
                },
                {
                    "name": "AMAZON.NavigateHomeIntent",
                    "samples": []
                },
                {
                    "name": "NewIntegerIntent",
                    "slots": [
                        {
                            "name": "variable_name",
                            "type": "variable_type"
                        },
                        {
                            "name": "integer_value",
                            "type": "AMAZON.NUMBER"
                        }
                    ],
                    "samples": [
                        "create integer variable {variable_name} with value {integer_value}",
                        "create another integer varibale {variable_name} with value {integer_value}",
                        "initialize integer {variable_name} with {integer_value}",
                        "create an integer variable {variable_name} with value {integer_value}",
                        "place {integer_value} in integer variable {variable_name}",
                        "create integer {variable_name} and initialize it with {integer_value}",
                        "make an integer variable {variable_name} with value {integer_value}",
                        "create an integer {variable_name} with value {integer_value}"
                    ]
                },
                {
                    "name": "NewStringIntent",
                    "slots": [
                        {
                            "name": "variable_name",
                            "type": "variable_type"
                        },
                        {
                            "name": "string_value",
                            "type": "string_value_type"
                        }
                    ],
                    "samples": [
                        "create another string variable {variable_name} with value {string_value}",
                        "create string {variable_name} and initialize it with {string_value}",
                        "create string variable {variable_name} with value {string_value}",
                        "make an string variable {variable_name} with value {string_value}",
                        "create a string variable {variable_name} with value {string_value}",
                        "place {string_value} in string variable {variable_name}",
                        "initialize string {variable_name} with {string_value}"
                    ]
                },
                {
                    "name": "ForLoopIntent",
                    "slots": [
                        {
                            "name": "starting_number",
                            "type": "AMAZON.NUMBER",
                            "samples": [
                                "begin at {starting_number}",
                                "{starting_number} is the start",
                                "starting at {starting_number}",
                                "It should start at {starting_number}"
                            ]
                        },
                        {
                            "name": "ending_number",
                            "type": "AMAZON.NUMBER",
                            "samples": [
                                "{ending_number} would be the end",
                                "{ending_number} is the end",
                                "end at {ending_number}",
                                "the end should be at {ending_number}"
                            ]
                        }
                    ],
                    "samples": [
                        "create a for loop",
                        "Start a for loop from {starting_number} to {ending_number}",
                        "Start a loop from {starting_number} to {ending_number}",
                        "Create a for loop from {starting_number} to {ending_number}",
                        "Loop through the range {starting_number} to {ending_number}",
                        "Form a loop from {starting_number} to {ending_number}",
                        "Create a loop from {starting_number} to {ending_number}"
                    ]
                },
                {
                    "name": "DisplayVariableIntent",
                    "slots": [
                        {
                            "name": "variable_name",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "now display value of {variable_name}",
                        "print value of {variable_name}",
                        "output variable {variable_name}",
                        "Display the value of {variable_name}",
                        "Show the value of {variable_name}",
                        "What's the value of {variable_name}"
                    ]
                },
                {
                    "name": "ClearCodeIntent",
                    "slots": [],
                    "samples": [
                        "Remove everything",
                        "Clear up everything",
                        "Delete everything",
                        "Clear the whole thing up",
                        "Clear the whole code"
                    ]
                },
                {
                    "name": "ListAppendIntent",
                    "slots": [
                        {
                            "name": "list_value",
                            "type": "variable_type"
                        },
                        {
                            "name": "variable_name",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "append {list_value} to {variable_name}",
                        "add {list_value} to list {variable_name}",
                        "append {list_value} to the list {variable_name}"
                    ]
                },
                {
                    "name": "CreateWhileLoopIntent",
                    "slots": [
                        {
                            "name": "first_variable",
                            "type": "variable_type"
                        },
                        {
                            "name": "operator",
                            "type": "operator_type"
                        },
                        {
                            "name": "second_variable",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "While loop until {first_variable} {operator} {second_variable}",
                        "While loop till {first_variable} {operator} {second_variable}",
                        "Check {first_variable} {operator} {second_variable} in a while loop",
                        "Add while loop checking {first_variable} {operator} {second_variable}",
                        "Add a while loop with {first_variable} {operator} {second_variable}",
                        "Create while loop with condition {first_variable} {operator} {second_variable}",
                        "Create a while loop checking {first_variable} {operator} {second_variable}"
                    ]
                },
                {
                    "name": "PrintStatementIntent",
                    "slots": [
                        {
                            "name": "print_statement",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "display {print_statement}",
                        "write on console {print_statement}",
                        "{print_statement} should be displayed",
                        "now display {print_statement}",
                        "now output {print_statement} to console",
                        "print {print_statement}"
                    ]
                },
                {
                    "name": "ExecuteCodeIntent",
                    "slots": [],
                    "samples": [
                        "Run this code for me",
                        "Give me the results of this code",
                        "Give the output of current code",
                        "Run the current code",
                        "Execute it",
                        "Execute the current code"
                    ]
                },
                {
                    "name": "RemoveItemIntent",
                    "slots": [
                        {
                            "name": "first_variable",
                            "type": "variable_type"
                        },
                        {
                            "name": "second_variable",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "remove {second_variable} from list {first_variable}",
                        "in list {first_variable} remove {second_variable}"
                    ]
                },
                {
                    "name": "ChangeItemAtIndexIntent",
                    "slots": [
                        {
                            "name": "first_variable",
                            "type": "variable_type"
                        },
                        {
                            "name": "index_value",
                            "type": "AMAZON.NUMBER"
                        },
                        {
                            "name": "second_variable",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "change item of {first_variable} with {second_variable} at index {index_value}",
                        "in list {first_variable} replace index {index_value} with {second_variable}"
                    ]
                },
                {
                    "name": "JoiningTwoListIntent",
                    "slots": [
                        {
                            "name": "second_variable",
                            "type": "variable_type"
                        },
                        {
                            "name": "first_variable",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "join list {second_variable} at the end of list {first_variable}",
                        "join list {second_variable} with list {first_variable}"
                    ]
                },
                {
                    "name": "AddCommentIntent",
                    "slots": [
                        {
                            "name": "comment_string",
                            "type": "string_value_type"
                        }
                    ],
                    "samples": [
                        "add comment {comment_string}",
                        "put comment {comment_string}",
                        "comment {comment_string}",
                        "write a comment {comment_string}"
                    ]
                },
                {
                    "name": "NewIfBlockIntent",
                    "slots": [
                        {
                            "name": "operator",
                            "type": "operator_type"
                        },
                        {
                            "name": "first_variable",
                            "type": "variable_type"
                        },
                        {
                            "name": "second_variable",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "tell wether {first_variable} {operator} {second_variable}",
                        "check if {first_variable} {operator} {second_variable}"
                    ]
                },
                {
                    "name": "NewElIfBlockIntent",
                    "slots": [
                        {
                            "name": "first_variable",
                            "type": "variable_type"
                        },
                        {
                            "name": "operator",
                            "type": "operator_type"
                        },
                        {
                            "name": "second_variable",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "otherwise check if {first_variable} {operator} {second_variable}"
                    ]
                },
                {
                    "name": "NewElseBlockIntent",
                    "slots": [],
                    "samples": [
                        "otherwise do this",
                        "else do this"
                    ]
                },
                {
                    "name": "SortingListIntent",
                    "slots": [
                        {
                            "name": "first_variable",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "get list {first_variable} sorted",
                        "sort list {first_variable}",
                        "sort the list named {first_variable}"
                    ]
                },
                {
                    "name": "DecreaseIndentIntent",
                    "slots": [],
                    "samples": [
                        "go one indentation level down",
                        "finish this loop block",
                        "finish this if block",
                        "come out of loop block",
                        "come out of if block",
                        "decrease indent by one",
                        "go one level down"
                    ]
                },
                {
                    "name": "FunctionCreationIntent",
                    "slots": [
                        {
                            "name": "number",
                            "type": "AMAZON.NUMBER",
                            "samples": [
                                "with {number}",
                                "it should have {number} parameters",
                                "with {number} parameters",
                                "{number}",
                                "function would have {number} parameters"
                            ]
                        },
                        {
                            "name": "function_name",
                            "type": "variable_type",
                            "samples": [
                                "the name is {function_name} having {number} parameters",
                                "it should be {function_name}",
                                "{function_name}",
                                "name it {function_name}",
                                "the name of function would be {function_name}"
                            ]
                        }
                    ],
                    "samples": [
                        "new function with name {function_name}",
                        "write function {function_name}",
                        "create function with {number} arguments",
                        "create a function named {function_name} containing {number} argumetns",
                        "new function {function_name} having {number} parameters",
                        "declare a function {function_name} with {number} parameters",
                        "new function {function_name} with {number} parameters",
                        "create a function {function_name} with {number} parameters",
                        "declare function with {number} parameters",
                        "create a function"
                    ]
                },
                {
                    "name": "DefineParameterIntent",
                    "slots": [
                        {
                            "name": "variable_name",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "next would be {variable_name}",
                        "{variable_name} is next parameter",
                        "{variable_name} would be next",
                        "next is {variable_name}",
                        "next parameter would be {variable_name}",
                        "first parameter is {variable_name}"
                    ]
                },
                {
                    "name": "BinaryOperationIntent",
                    "slots": [
                        {
                            "name": "firstvar",
                            "type": "variable_type",
                            "samples": [
                                "{firstvar} should contain the final value",
                                "The variable would be {firstvar}",
                                "{firstvar}"
                            ]
                        },
                        {
                            "name": "secondvar",
                            "type": "variable_type",
                            "samples": [
                                "it was {secondvar}",
                                "first variable was {secondvar}"
                            ]
                        },
                        {
                            "name": "operation",
                            "type": "binary_operator",
                            "samples": [
                                "{operation} should be performed between the variables",
                                "{operation}",
                                "do the {operation} operation",
                                "perform {operation} "
                            ]
                        },
                        {
                            "name": "thirdvar",
                            "type": "variable_type",
                            "samples": [
                                "it was {thirdvar}",
                                "the variable was {thirdvar}"
                            ]
                        }
                    ],
                    "samples": [
                        "value of {firstvar} equals {secondvar} {operation} {thirdvar}",
                        "put {firstvar} equals {secondvar} {operation} {thirdvar}",
                        "{secondvar} and {thirdvar} should be {operation}",
                        "{operation} {secondvar} and {thirdvar} and put it into {firstvar}",
                        "assign {firstvar} with {secondvar} {operation} {thirdvar}",
                        "{operation} {secondvar} with {thirdvar}"
                    ]
                },
                {
                    "name": "UndoIntent",
                    "slots": [],
                    "samples": [
                        "clear the last command",
                        "clear the previous command",
                        "clear the last line",
                        "Please remove the previous line",
                        "please undo the last line",
                        "undo the previous line please",
                        "remove the previous line",
                        "undo the previous line",
                        "can you undo that last one please",
                        "remove the last line please",
                        "remove the last line",
                        "undo that last one",
                        "can you undo that last one"
                    ]
                },
                {
                    "name": "DynamicListInsertionIntent",
                    "slots": [
                        {
                            "name": "list_name",
                            "type": "variable_type",
                            "samples": [
                                "give name to list as {list_name}",
                                "list name would be {list_name}",
                                "name of my list is {list_name}",
                                "list  name is {list_name}"
                            ]
                        },
                        {
                            "name": "number",
                            "type": "AMAZON.NUMBER",
                            "samples": [
                                "total items in the list will be {number}",
                                "list will have {number} items"
                            ]
                        }
                    ],
                    "samples": [
                        "define a list {list_name} having {number} objects",
                        "new list {list_name} with {number} arguments",
                        "create an array with name {list_name} ",
                        "create a new list named {list_name}",
                        "create a list {list_name}",
                        "I want a list with name {list_name} and {number} items",
                        "Make a list {list_name} with {number} items",
                        "Create a list named {list_name} with {number} number of items"
                    ]
                },
                {
                    "name": "DefineListItemIntent",
                    "slots": [
                        {
                            "name": "variable_name",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "{variable_name} is the next item in the list",
                        "next item in list is {variable_name}",
                        "{variable_name} is the first list item",
                        "first item of list is {variable_name}",
                        "{variable_name} is the next list item",
                        "next list item will be {variable_name}"
                    ]
                },
                {
                    "name": "AddingReturnInFunctionIntent",
                    "slots": [
                        {
                            "name": "first_variable",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "{first_variable} should be returned",
                        "return {first_variable}",
                        "give back {first_variable}"
                    ]
                },
                {
                    "name": "FunctionCallingIntent",
                    "slots": [
                        {
                            "name": "function_name",
                            "type": "variable_type",
                            "samples": [
                                "please call {function_name}",
                                "i want to call {function_name}"
                            ]
                        },
                        {
                            "name": "number",
                            "type": "AMAZON.NUMBER",
                            "samples": [
                                "this calling function will take {number} parameters"
                            ]
                        }
                    ],
                    "samples": [
                        "call function {function_name} with {number} arguments",
                        "call function {function_name} accepting {number} parameters",
                        "call a function named {function_name} having {number} parameters"
                    ]
                },
                {
                    "name": "CallingFunctionParameterIntent",
                    "slots": [
                        {
                            "name": "variable_name",
                            "type": "variable_type"
                        }
                    ],
                    "samples": [
                        "next prameter for this calling function will be {variable_name}",
                        "first parameter of the calling function will be {variable_name}"
                    ]
                }
            ],
            "types": [
                {
                    "name": "variable_type",
                    "values": [
                        {
                            "name": {
                                "value": "bus"
                            }
                        },
                        {
                            "name": {
                                "value": "car"
                            }
                        },
                        {
                            "name": {
                                "value": "x"
                            }
                        },
                        {
                            "name": {
                                "value": "count"
                            }
                        },
                        {
                            "name": {
                                "value": "var2",
                                "synonyms": [
                                    "vartwo"
                                ]
                            }
                        },
                        {
                            "name": {
                                "value": "j"
                            }
                        },
                        {
                            "name": {
                                "value": "list1",
                                "synonyms": [
                                    "listone"
                                ]
                            }
                        },
                        {
                            "name": {
                                "value": "var1",
                                "synonyms": [
                                    "varone"
                                ]
                            }
                        },
                        {
                            "name": {
                                "value": "i",
                                "synonyms": [
                                    "eye"
                                ]
                            }
                        },
                        {
                            "name": {
                                "value": "output"
                            }
                        },
                        {
                            "name": {
                                "value": "sum",
                                "synonyms": [
                                    "some"
                                ]
                            }
                        },
                        {
                            "name": {
                                "value": "result"
                            }
                        },
                        {
                            "name": {
                                "value": "num"
                            }
                        },
                        {
                            "name": {
                                "value": "hello world"
                            }
                        },
                        {
                            "name": {
                                "value": "list variable"
                            }
                        },
                        {
                            "name": {
                                "value": "string variable"
                            }
                        },
                        {
                            "name": {
                                "value": "number variable"
                            }
                        }
                    ]
                },
                {
                    "name": "string_value_type",
                    "values": [
                        {
                            "name": {
                                "value": "result"
                            }
                        },
                        {
                            "name": {
                                "value": "sum"
                            }
                        },
                        {
                            "name": {
                                "value": "four"
                            }
                        },
                        {
                            "name": {
                                "value": "five"
                            }
                        },
                        {
                            "name": {
                                "value": "three"
                            }
                        },
                        {
                            "name": {
                                "value": "two"
                            }
                        },
                        {
                            "name": {
                                "value": "one"
                            }
                        },
                        {
                            "name": {
                                "value": "Python Sucks"
                            }
                        },
                        {
                            "name": {
                                "value": "Python Is Cool"
                            }
                        }
                    ]
                },
                {
                    "name": "operator_type",
                    "values": [
                        {
                            "id": "4",
                            "name": {
                                "value": "not equal to",
                                "synonyms": [
                                    "is not equal to"
                                ]
                            }
                        },
                        {
                            "id": "3",
                            "name": {
                                "value": "less than",
                                "synonyms": [
                                    "is less than"
                                ]
                            }
                        },
                        {
                            "id": "2",
                            "name": {
                                "value": "equal to",
                                "synonyms": [
                                    "is equal to"
                                ]
                            }
                        },
                        {
                            "id": "1",
                            "name": {
                                "value": "greater than",
                                "synonyms": [
                                    "is greater than"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "binary_operator",
                    "values": [
                        {
                            "id": "%",
                            "name": {
                                "value": "percentile"
                            }
                        },
                        {
                            "id": "**",
                            "name": {
                                "value": "exponent",
                                "synonyms": [
                                    "power"
                                ]
                            }
                        },
                        {
                            "id": "*",
                            "name": {
                                "value": "multiply",
                                "synonyms": [
                                    "multiples",
                                    "multiple"
                                ]
                            }
                        },
                        {
                            "id": "/",
                            "name": {
                                "value": "divide",
                                "synonyms": [
                                    "divides"
                                ]
                            }
                        },
                        {
                            "id": "-",
                            "name": {
                                "value": "subtract",
                                "synonyms": [
                                    "decrease",
                                    "minus"
                                ]
                            }
                        },
                        {
                            "id": "+",
                            "name": {
                                "value": "add",
                                "synonyms": [
                                    "sum",
                                    "plus"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        "dialog": {
            "intents": [
                {
                    "name": "NewIntegerIntent",
                    "confirmationRequired": false,
                    "prompts": {},
                    "slots": [
                        {
                            "name": "variable_name",
                            "type": "variable_type",
                            "confirmationRequired": false,
                            "elicitationRequired": false,
                            "prompts": {}
                        },
                        {
                            "name": "integer_value",
                            "type": "AMAZON.NUMBER",
                            "confirmationRequired": false,
                            "elicitationRequired": false,
                            "prompts": {}
                        }
                    ]
                },
                {
                    "name": "ClearCodeIntent",
                    "confirmationRequired": true,
                    "prompts": {
                        "confirmation": "Confirm.Intent.1373190617736"
                    },
                    "slots": []
                },
                {
                    "name": "FunctionCreationIntent",
                    "confirmationRequired": false,
                    "prompts": {},
                    "slots": [
                        {
                            "name": "number",
                            "type": "AMAZON.NUMBER",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.212541405180.1325916719769"
                            }
                        },
                        {
                            "name": "function_name",
                            "type": "variable_type",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.411883240496.808422700481"
                            }
                        }
                    ]
                },
                {
                    "name": "BinaryOperationIntent",
                    "confirmationRequired": false,
                    "prompts": {},
                    "slots": [
                        {
                            "name": "firstvar",
                            "type": "variable_type",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.1039205159077.929198106318"
                            }
                        },
                        {
                            "name": "secondvar",
                            "type": "variable_type",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.1039205159077.471627531306"
                            }
                        },
                        {
                            "name": "operation",
                            "type": "binary_operator",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.1039205159077.516803017228"
                            }
                        },
                        {
                            "name": "thirdvar",
                            "type": "variable_type",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.1039205159077.591270236972"
                            }
                        }
                    ]
                },
                {
                    "name": "ForLoopIntent",
                    "confirmationRequired": false,
                    "prompts": {},
                    "slots": [
                        {
                            "name": "starting_number",
                            "type": "AMAZON.NUMBER",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.248692328566.1563917224568"
                            }
                        },
                        {
                            "name": "ending_number",
                            "type": "AMAZON.NUMBER",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.248692328566.61313585424"
                            }
                        }
                    ]
                },
                {
                    "name": "DynamicListInsertionIntent",
                    "confirmationRequired": false,
                    "prompts": {},
                    "slots": [
                        {
                            "name": "list_name",
                            "type": "variable_type",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.562255703989.471855265636"
                            }
                        },
                        {
                            "name": "number",
                            "type": "AMAZON.NUMBER",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.562255703989.676110470714"
                            }
                        }
                    ]
                },
                {
                    "name": "FunctionCallingIntent",
                    "confirmationRequired": false,
                    "prompts": {},
                    "slots": [
                        {
                            "name": "function_name",
                            "type": "variable_type",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.1431394654169.1479780331552"
                            }
                        },
                        {
                            "name": "number",
                            "type": "AMAZON.NUMBER",
                            "confirmationRequired": false,
                            "elicitationRequired": true,
                            "prompts": {
                                "elicitation": "Elicit.Slot.1431394654169.1063184953598"
                            }
                        }
                    ]
                }
            ],
            "delegationStrategy": "ALWAYS"
        },
        "prompts": [
            {
                "id": "Confirm.Intent.1373190617736",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "Are you sure you want to clear whole code?"
                    },
                    {
                        "type": "PlainText",
                        "value": "Are you sure you want to delete everything?"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.212541405180.1325916719769",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "how many parameters should the funtion have?"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.411883240496.808422700481",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "please define a name for your function"
                    },
                    {
                        "type": "PlainText",
                        "value": "what should be the name of the function"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.1039205159077.929198106318",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "which variable should hold the final value?"
                    },
                    {
                        "type": "PlainText",
                        "value": "where should I place the value after operation"
                    },
                    {
                        "type": "PlainText",
                        "value": "which variable the final value should be assigned ?"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.1039205159077.516803017228",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "Please repeat the operation to perform"
                    },
                    {
                        "type": "PlainText",
                        "value": "Please specify the operation to be perfomed"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.1039205159077.471627531306",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "what was the first variable again?"
                    },
                    {
                        "type": "PlainText",
                        "value": "Please repeat the first variable again"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.1039205159077.591270236972",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "please repeat the second variable"
                    },
                    {
                        "type": "PlainText",
                        "value": "what was the second variable again?"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.248692328566.1563917224568",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "where should the for loop start"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.248692328566.61313585424",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "what should be the ending point"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.562255703989.471855265636",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "you have not mentioned the list name,Please let me know it to move ahead"
                    },
                    {
                        "type": "PlainText",
                        "value": "I need a list name to proceed further"
                    },
                    {
                        "type": "PlainText",
                        "value": "I think you have forgot to tell me the list name, Please provide it"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.562255703989.676110470714",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "you have not mentioned total items count"
                    },
                    {
                        "type": "PlainText",
                        "value": "please tell the number of items in the list"
                    },
                    {
                        "type": "PlainText",
                        "value": "You have not mentioned the number of items your list will have"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.1431394654169.1479780331552",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "you have not specified the function you want to call"
                    }
                ]
            },
            {
                "id": "Elicit.Slot.1431394654169.1063184953598",
                "variations": [
                    {
                        "type": "PlainText",
                        "value": "please tell how many parameters this calling function will take?"
                    }
                ]
            }
        ]
    }
}